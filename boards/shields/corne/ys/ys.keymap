/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>

// Layer definitions
#define DVORAK  0
#define QWERTY  1
#define LOWER   2
#define RAISE   3
#define ADJUST  4
#define LAUNCH  5

&mt {
    tapping-term-ms = <201>;
    flavor = "tap-preferred";
};

&lt {
    tapping-term-ms = <240>;
    flavor = "balanced";
};

/ {
    behaviors {
        // Tap Dance: Alt (tap) / Left Alt (double tap)
        td_alt: tap_dance_alt {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_ALT";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp RALT>, <&kp LALT>;
        };

        // Tap Dance: Left Shift (tap) / Caps Lock (double tap)
        td_caps: tap_dance_caps {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_CAPS";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp LSHFT>, <&kp CAPS>;
        };

        // Tap Dance: GUI (tap) / Meh (double tap)
        td_super: tap_dance_super {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_SUPER";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp LGUI>, <&kp LS(LC(LALT))>;
        };

        // Tap Dance: Dollar (tap) / Tilde (double tap)
        td_dollar: tap_dance_dollar {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_DOLLAR";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp DLLR>, <&kp TILDE>;
        };

        // Tap Dance: Backspace (tap) / Ctrl+Backspace (hold)
        td_bck: tap_dance_backspace {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_BACKSPACE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp BSPC>, <&kp LC(BSPC)>;
        };

        // Hold-tap for Control+Tab
        ctltb: ctrl_tab {
            compatible = "zmk,behavior-hold-tap";
            label = "CTRL_TAB";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        // Layer tap for launch layer with space
        lch: launch_space {
            compatible = "zmk,behavior-hold-tap";
            label = "LAUNCH_SPACE";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            flavor = "tap-preferred";
            bindings = <&mo>, <&kp>;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <LOWER RAISE>;
            then-layer = <ADJUST>;
        };
    };

    combos {
        compatible = "zmk,combos";
        
        // Application shortcuts
        combo_firefox {
            timeout-ms = <50>;
            key-positions = <13 14>; // A+O in Dvorak
            bindings = <&kp LG(F1)>;
            layers = <DVORAK QWERTY>;
        };
        
        combo_telegram {
            timeout-ms = <50>;
            key-positions = <15 16>; // E+U in Dvorak  
            bindings = <&kp LG(F3)>;
            layers = <DVORAK QWERTY>;
        };
        
        combo_dbeaver {
            timeout-ms = <50>;
            key-positions = <19 20>; // H+T in Dvorak
            bindings = <&kp LS(LG(B))>;
            layers = <DVORAK QWERTY>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        dvorak_layer {
// -----------------------------------------------------------------------------------------
// | ESC |  ;  |  ,  |  .  |  P  |  Y  |   |  F  |  G  |  C  |  R  |  L  | BCK |
// |C/TAB|  A  |  O  |  E  |  U  |  I  |   |  D  |  H  |  T  |  N  |  S  |  -  |
// |SHIFT|  '  |  Q  |  J  |  K  |  X  |   |  B  |  M  |  W  |  V  |  Z  |SHIFT|
//                   |SUPER|LOWER|LCH/SP|   | ENT |RAISE| ALT |
            bindings = <
   &rgb_ug RGB_COLOR_HSV(0,100,100) &rgb_ug RGB_ON &none &none &none &none   &to DVORAK &to QWERTY &none &none &none &kp C_PWR
   &rgb_ug RGB_TOG &rgb_ug RGB_HUI &rgb_ug RGB_SAI &rgb_ug RGB_BRI &none &none   &none &none &none &none &none &sys_reset
   &rgb_ug RGB_EFF &rgb_ug RGB_HUD &rgb_ug RGB_SAD &rgb_ug RGB_BRD &none &none   &none &none &none &none &none &kp C_SLEEP
   /* &kp ESC    &kp SEMI &kp COMMA &kp DOT &kp P &kp Y   &kp F &kp G &kp C &kp R &kp L    &td_bck */
   /* &ctltb LCTRL TAB &kp A &kp O &kp E &kp U &kp I   &kp D &kp H &kp T &kp N &kp S    &kp MINUS */
   /* &kp LSHFT  &kp SQT  &kp Q     &kp J   &kp K &kp X   &kp B &kp M &kp W &kp V &kp Z    &kp RSHFT */
                       &td_super &mo LOWER &lch LAUNCH SPACE   &kp RET &mo RAISE &td_alt
            >;
        };

        qwerty_layer {
// -----------------------------------------------------------------------------------------
// | ESC |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U  |  I  |  O  |  P  | BCK |
// |C/TAB|  A  |  S  |  D  |  F  |  G  |   |  H  |  J  |  K  |  L  |  ;  |  '  |
// |SHIFT|  Z  |  X  |  C  |  V  |  B  |   |  N  |  M  |  ,  |  .  |  /  |SHIFT|
//                   |SUPER|LOWER| SPC |   | ENT |RAISE| ALT |
            bindings = <
   &kp ESC    &kp Q &kp W &kp E &kp R &kp T   &kp Y &kp U  &kp I     &kp O   &kp P    &td_bck
   &ctltb LCTRL TAB &kp A &kp S &kp D &kp F &kp G   &kp H &kp J  &kp K     &kp L   &kp SEMI &kp SQT
   &kp LSHFT  &kp Z &kp X &kp C &kp V &kp B   &kp N &kp M  &kp COMMA &kp DOT &kp FSLH &kp RSHFT
                    &td_super &mo LOWER &kp SPACE   &kp RET &mo RAISE &td_alt
            >;
        };

        lower_layer {
// -----------------------------------------------------------------------------------------
// | ESC | [ | { | } | ( | = |   | * | ) | + | ] | ! | BSP |
// | $ | PgUp| PgDn| Home| End |PrtSc|   | Del| ← | ↓ | ↑ | → | # |
// |C/TAB|     |     |     | & | ^ |   | % | ` | \ | @ | / |SHIFT|
//                   |SUPER|LOWER| SPC |   | ENT |RAISE| ALT |
            bindings = <
   &kp ESC    &kp LBKT &kp LBRC &kp RBRC &kp LPAR &kp EQUAL   &kp ASTRK &kp RPAR &kp PLUS  &kp RBKT &kp EXCL &kp BSPC
   &td_dollar &kp PG_UP &kp PG_DN &kp HOME &kp END &kp PSCRN  &kp DEL   &kp LEFT &kp DOWN  &kp UP   &kp RIGHT &kp HASH
   &ctltb LCTRL TAB &none &none &none &kp AMPS &kp CARET     &kp PRCNT &kp GRAVE &kp BSLH &kp AT   &kp FSLH  &td_caps
                              &td_super &mo LOWER &kp SPACE   &kp RET   &mo RAISE &td_alt
            >;
        };

        raise_layer {
// -----------------------------------------------------------------------------------------
// |  ;  |  7  |  5  |  3  |  1  |  9  |   |  0  |  2  |  4  |  6  |  8  | BSP |
// | F1  | F2  | F3  | F4  | F5  | F6  |   | F7  | F8  | F9  | F10 | F11 | F12 |
// |SHIFT|MUTE |VOLD |VOLU |PLAY |     |   |     |     |     |     |     |SHIFT|
//                   |SUPER|LOWER| SPC |   | ENT |RAISE| ALT |
            bindings = <
   &kp SEMI  &kp N7   &kp N5   &kp N3   &kp N1   &kp N9     &kp N0 &kp N2 &kp N4 &kp N6  &kp N8  &kp BSPC
   &kp F1    &kp F2   &kp F3   &kp F4   &kp F5   &kp F6     &kp F7 &kp F8 &kp F9 &kp F10 &kp F11 &kp F12
   &kp RSHFT &kp C_MUTE &kp C_VOL_DN &kp C_VOL_UP &kp C_PP &none   &none  &none  &none  &none   &none   &kp RSHFT
                                &td_super &mo LOWER &kp SPACE   &kp RET &mo RAISE &td_alt
            >;
        };

        adjust_layer {
// -----------------------------------------------------------------------------------------
// |RGBRST|     |     |     |     |     |   |DVORAK|QWERTY|     |     |     | PWR |
// |RGB_TOG|HUE+|SAT+|BRI+ |     |     |   |     |     |     |     |     |RESET|
// |RGB_MOD|HUE-|SAT-|BRI- |     |     |   |     |     |     |     |     |SLEEP|
//                   |SUPER|LOWER| SPC |   | ENT |RAISE| ALT |
            bindings = <
   &rgb_ug RGB_COLOR_HSV(0,100,100) &none &none &none &none &none   &to DVORAK &to QWERTY &none &none &none &kp C_PWR
   &rgb_ug RGB_TOG &rgb_ug RGB_HUI &rgb_ug RGB_SAI &rgb_ug RGB_BRI &none &none   &none &none &none &none &none &sys_reset
   &rgb_ug RGB_EFF &rgb_ug RGB_HUD &rgb_ug RGB_SAD &rgb_ug RGB_BRD &none &none   &none &none &none &none &none &kp C_SLEEP
                                    &td_super &mo LOWER &kp SPACE   &kp RET &mo RAISE &td_alt
            >;
        };

        launch_layer {
// -----------------------------------------------------------------------------------------
// |     |     |     |     |     |     |   |     |     |     |     |     |     |
// |FIREFOX|   |TELEGRM|   |     |     |   |DBEAVER|   |     |     |     |     |
// |     |     |     |     |     |     |   |     |     |     |     |     |     |
//                   |SUPER|LOWER|LCH/SP|   | ENT |RAISE| ALT |
            bindings = <
   &none     &none &none     &none &none &none   &none      &none &none &none &none &none
   &kp LG(F1) &none &kp LG(F3) &none &none &none   &kp LS(LG(B)) &none &none &none &none &none
   &none     &none &none     &none &none &none   &none      &none &none &none &none &none
                   &td_super &mo LOWER &lch LAUNCH SPACE   &kp RET &mo RAISE &td_alt
            >;
        };
    };
};
